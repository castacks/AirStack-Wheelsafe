# docker compose file
services:
  # ==============================================================================

  # TODO: Make a service for the drive workspace container.

  # Container for running ZED wrapper
  # Based on compose example from the official ZED tutorials:
  # https://www.stereolabs.com/docs/docker/orchestration#docker-compose
  wheelsafe_zed:
    image: wheelsafe_zed_test:latest
    container_name: wheelsafe_zed
    build:
      # context: ../zed_ws
      dockerfile: ./Dockerfile.zed_ws
      # tags:
      #   - *airstack-dev-image
      # build:
      #   context: ./
      #   dockerfile: ./Dockerfile.zed
      # user: 1000:1000
    runtime: nvidia
    environment:
      - NVIDIA_DRIVER_CAPABILITIES=all
      - DISPLAY
      - QT_X11_NO_MITSHM=1 # Do we need this?
    # Interactive shell
    stdin_open: true # docker run -i
    tty: true # docker run -t
    # Needed to display graphical applications
    privileged: true
    networks:
      - airstack_network
    ports:
      # for ssh, starting from 2223-2243 on the host port all map to 22 in the container. Assumes no more than 21 robots
      - "2223-2243:22"

    volumes:
      # ZED stuff
      - /usr/local/zed/resources:/usr/local/zed/resources
      - /usr/local/zed/settings:/usr/local/zed/settings
      - /var/nvidia/nvcam/settings/:/var/nvidia/nvcam/settings/
      - /etc/systemd/system/zed_x_daemon.service:/etc/systemd/system/zed_x_daemon.service
      - /tmp/:/tmp/
      - /dev:/dev
      # display stuff
      - $HOME/.Xauthority:/root/.Xauthority
      - /tmp/.X11-unix:/tmp/.X11-unix
      # developer stuff
      - .dev:/root/.dev:rw # developer config
      - .bashrc:/root/.bashrc:rw # bash config
      - /var/run/docker.sock:/var/run/docker.sock # access docker API for container name
      # autonomy stack stuff
      # - ../../common/ros_packages:/root/ros_ws/src/common:rw # common ROS packages
      # - ../../common/ros_packages/fastdds.xml:/root/ros_ws/fastdds.xml:rw # fastdds.xml
      - ../zed_ws:/zed_ws:rw # Mainly houses ZED wrapper package.

  # Service for running offroad stack packages and nodes.
  wheelsafe_autonomy:
    image: wheelsafe_autonomy_test:latest
    container_name: wheelsafe_autonomy
    runtime: nvidia
    environment:
      - NVIDIA_DRIVER_CAPABILITIES=all
      - DISPLAY
    privileged: true
    tty: true
    volumes:
      - /home/airlab/new_wheelsafe_workspaces/test_autonomy_ws:/autonomy_ws

  robot:
    image: &airstack-dev-image airlab-storage.andrew.cmu.edu:5001/shared/airstack-dev:v0.5.5
    build:
      dockerfile: ./Dockerfile.airstack-dev
      tags:
        - *airstack-dev-image
    entrypoint: ""
    # we use tmux send-keys so that the session stays alive
    command: >
      bash -c "ssh service restart; tmux new -d -s robot_bringup && tmux send-keys -t robot_bringup  'if [ ! -d "ros_ws/install" ]; then bws && sws; fi; ros2 launch robot_bringup robot.launch.xml' ENTER && sleep infinity"
    # Interactive shell
    stdin_open: true # docker run -i
    tty: true # docker run -t
    # Needed to display graphical applications
    privileged: true
    networks:
      - airstack_network
    environment:
      - DISPLAY
      - QT_X11_NO_MITSHM=1
    deploy:
      # let it use the GPU
      resources:
        reservations:
          devices:
            - driver: nvidia # https://stackoverflow.com/a/70761193
              count: 1
              capabilities: [ gpu ]
    ports:
      # for ssh, starting from 2223-2243 on the host port all map to 22 in the container. Assumes no more than 21 robots
      - "2223-2243:22"
    volumes:
      # display stuff
      - $HOME/.Xauthority:/root/.Xauthority
      - /tmp/.X11-unix:/tmp/.X11-unix
      # developer stuff
      - .dev:/root/.dev:rw # developer config
      - .bashrc:/root/.bashrc:rw # bash config
      - /var/run/docker.sock:/var/run/docker.sock # access docker API for container name
      # autonomy stack stuff
      - ../../common/ros_packages:/root/ros_ws/src/common:rw # common ROS packages
      - ../../common/ros_packages/fastdds.xml:/root/ros_ws/fastdds.xml:rw # fastdds.xml
      - ../ros_ws:/root/ros_ws:rw # robot-specific ROS packages
# ==============================================================================
networks:
  airstack_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.31.0.0/24
